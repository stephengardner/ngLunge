lungeApp.controller("UploadControllerDirect", function($http, $scope, $upload) {
	$scope.onFileSelect = function ($files) {
		$scope.progress = 0;
		$scope.files = $files;
		$scope.upload = [];

		// reset the url so that the ng-if background-url removes itself
		$scope.profile.picture.url = false;

		//g rab the first file, we only are accepting single file uploads
		var file = $files[0];

		// only allow certain mimeTypes, specify them here
		var mimeTypesAllowed = {
			'image/jpeg' : '.jpg',
			'image/png' : '.png'
		};
		// make sure the extension matches one of the supported mimeTypes
		var extension = mimeTypesAllowed[file.type];
		if(!extension) {
			alert("Please select a .jpg or a .png image file as your profile picture");
			return false;
		}

		// get the AWS policy from the server which allows this page to upload a certain file to our bucket.
		// since the AWS secret key cannot be exposed here, we need to ask our nodeJS server to "sign a policy" with
		// our secret key, and then return to us the policy data which we send along with our POST to AWS.
		$http.get('/api/aws/policy?mimeType='+ file.type).success(function(response) {
			var serverResponseParams = response;

			// specify which subfolder of our bucket this image is going to go into.
			// then also specify the name of the file, which was auto-generated by our server.
			// we need to give AWS the exact path and filename of the location where we want it saved
			var s3FilePath = 'profile-pictures/trainers/';
			var newS3FileName = serverResponseParams.newFileName;

			// we're saving this link to construct the final url at the end. so that the actual image uploaded link
			// can be viewable immediately after uploading
			var s3BucketUrl = 'https://golunge.s3.amazonaws.com/';

			// required data to post along with our file to AWS S3.  This validates with S3 so they allow the upload.
			// it also must match with the policy we auto generated from the server.  notive the policy and signature
			// are two required parameters in here
			var dataToPost = {
				key: s3FilePath + newS3FileName,
				AWSAccessKeyId: serverResponseParams.AWSAccessKeyId,
				acl: 'public-read',
				policy: serverResponseParams.s3Policy,
				signature: serverResponseParams.s3Signature,
				"Content-Type": file.type === null || file.type === '' ?
					'application/octet-stream' : file.type,
				filename: serverResponseParams.newFileName
			};


			// create the upload object on the scope
			$scope.upload = $upload.upload({
				url : s3BucketUrl,
				method : 'POST',
				data : dataToPost,
				file : file
			}).success(function(data, status, headers, config) {
				$scope.profile.picture.url = s3BucketUrl + s3FilePath + newS3FileName;
				console.log("*********** Success response: ", "data: ", data, "status: ", status, "headers: ", headers, " config: ", config);
			});

			// upload the file! and register some callbacks
			$scope.upload.then(function(response, two, three){
				console.log("---------- response: ", response, two, three);
			}, function(response) {
				console.log("-------- error:", response);
				if (response.status > 0) $scope.errorMsg = response.status + ': ' + response.data;
			}, function(evt) {
				console.log("-------- progress:", evt);
				$scope.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
			});
		});
	};
});